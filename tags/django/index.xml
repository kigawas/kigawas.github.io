<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Django on map(learn, world)</title><link>/tags/django/</link><description>Recent content in Django on map(learn, world)</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 15 Feb 2025 10:47:16 +0900</lastBuildDate><atom:link href="/tags/django/index.xml" rel="self" type="application/rss+xml"/><item><title>Handling Async File Responses in Django</title><link>/posts/async-file-response-in-django/</link><pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate><guid>/posts/async-file-response-in-django/</guid><description>&lt;p>When building web applications, serving files efficiently is rather important. While Django provides several ways to handle file downloads, the traditional approaches are synchronous, which are not ideal for large files or concurrent downloads. Let&amp;rsquo;s explore how to implement an asynchronous file response solution that&amp;rsquo;s both efficient and straightforward to use.&lt;/p>
&lt;h2 id="the-challenge">The Challenge&lt;/h2>
&lt;p>Django&amp;rsquo;s built-in file serving capabilities are primarily synchronous, which introduce a few challenges:&lt;/p>
&lt;ul>
&lt;li>Each file download occupies a worker process&lt;/li>
&lt;li>Large files block other requests&lt;/li>
&lt;li>Chunk size is not easily configurable (You need to modify &lt;code>FileResponse.block_size&lt;/code>)&lt;/li>
&lt;li>Concurrent downloads perform rather poorly&lt;/li>
&lt;/ul>
&lt;h2 id="the-solution">The Solution&lt;/h2>
&lt;p>Our solution addresses these challenges whilst remaining quite maintainable:&lt;/p></description></item><item><title>The integration of FastAPI and Django ORM</title><link>/posts/integrate-fastapi-and-django-orm/</link><pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate><guid>/posts/integrate-fastapi-and-django-orm/</guid><description>&lt;p>This is the English translation of the Japanese original post at &lt;a href="https://qiita.com/kigawas/items/80e48ccce98a35f65fff">qiita&lt;/a>, with some modifications.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>Recently FastAPI is &lt;a href="https://star-history.t9t.io/#tiangolo/fastapi">growing incredibly&lt;/a>. It&amp;rsquo;s blazingly fast and painless to develop, with &lt;a href="https://www.techempower.com/benchmarks/#section=data-r20&amp;amp;hw=ph&amp;amp;test=fortune&amp;amp;l=zijzen-sf">5~10x performance enhancement&lt;/a> over Django or Flask.&lt;/p>
&lt;p>I really want to switch to FastAPI from Django, however, it&amp;rsquo;s not that easy to give up Django and its self-sufficient user system as well as the admin page totally. I know it sounds greedy, but in fact there &lt;strong>is&lt;/strong> such convenience. This time I&amp;rsquo;ll show you how to integrate FastAPI and Django ORM simply and quickly.&lt;/p></description></item></channel></rss>