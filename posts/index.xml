<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on map(learn, world)</title><link>/posts/</link><description>Recent content in Posts on map(learn, world)</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 26 Jul 2024 00:51:17 +0900</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Bridging the Gap: A Rustacean Clean Architecture Approach to Web Development</title><link>/posts/rustacean-clean-architecture-approach/</link><pubDate>Sun, 21 Jul 2024 00:00:00 +0000</pubDate><guid>/posts/rustacean-clean-architecture-approach/</guid><description>Introduction Disclaimer: This article is partly generated with Claude and revamped with GPT-4o mini.
TL;DR: https://github.com/kigawas/clean-axum
The Web Development Framework Dilemma In the dynamic world of web development, choosing the right language and framework often feels like solving a Rubik&amp;rsquo;s cube blindfolded. As developers, we frequently find ourselves balancing competing priorities: performance vs. development speed, flexibility vs. structure, scalability vs. ease of use.
Selecting a web development framework is a multifaceted challenge.</description></item><item><title>Redefining shared behaviors algebraically</title><link>/posts/interface-vs-adt/</link><pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate><guid>/posts/interface-vs-adt/</guid><description>Overview Object-oriented programming is a ubiquitous paradigm all over the software development field as it could be found in the most of prevalent languages: C++, C#, Java, JavaScript, Python, etc. Polymorphism, an important characteristic in OOP, is often implemented by sub-typing in a typical OOP language.
interface Animal { public void talk(); } class Cat implements Animal { public void talk() { System.out.println(&amp;#34;meow&amp;#34;); } } class Dog implements Animal { public void talk() { System.</description></item><item><title>Why state containers are necessary</title><link>/posts/why-state-containers/</link><pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate><guid>/posts/why-state-containers/</guid><description>This article is partially based on a prior art.
Overview In modern JavaScript development, using some state container is a prevalent practice: redux for react and vuex for vue. But why it is necessary to integrate those &amp;ldquo;awesome state containers&amp;rdquo;? There might be too many reasons and explanations can be found all over the internet. In contrast, before stepping into the next level, we&amp;rsquo;ll walk through the simplest scenario: states in module A have changed and module B needs to know and react.</description></item><item><title>Reconsider the performance benchmarks in Python web development</title><link>/posts/performance-benchmarks-in-python-web-development/</link><pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate><guid>/posts/performance-benchmarks-in-python-web-development/</guid><description>A few words on common misunderstandings and performance tips of web development benchmarks.
Overview As of 2020, amongst the various web benchmarks, the most prestigious and reliable one would be TechEmpower benchmarks. Despite the fact that asyncio-based web frameworks prevail on performance in theory and in practice, how performant those frameworks are in pragmatic environments remains to be inspected.
According to TechEmpower benchmarks, it can be noticed that some Python frameworks even outperform Gin, the most famous and widely used Go web framework.</description></item><item><title>The integration of FastAPI and Django ORM</title><link>/posts/integrate-fastapi-and-django-orm/</link><pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate><guid>/posts/integrate-fastapi-and-django-orm/</guid><description>This is the English translation of the Japanese original post at qiita, with some modifications.
Motivation Recently FastAPI is growing incredibly. It&amp;rsquo;s blazingly fast and painless to develop, with 5~10x performance enhancement over Django or Flask.
I really want to switch to FastAPI from Django, however, it&amp;rsquo;s not that easy to give up Django and its self-sufficient user system as well as the admin page totally. I know it sounds greedy, but in fact there is such convenience.</description></item><item><title>Y-combinator in Python</title><link>/posts/y-combinator-in-python/</link><pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate><guid>/posts/y-combinator-in-python/</guid><description>A brief introduction to lambda calculus Lambda calculus is a language (formal system) to abstract and express calculation itself under only three concise rules.
Syntax Name Description x Variable Representing some value (Î»x. M) Abstraction Defining a function, M is also an expression of lambda calculus (M N) Application Calling a function, M and N are expressions of lambda calculus In lambda calculus, we can say &amp;ldquo;applying/calling/invoking a function&amp;rdquo; interchangeably.</description></item></channel></rss>