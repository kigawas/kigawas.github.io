<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functional Programming on map(learn, world)</title><link>/tags/functional-programming/</link><description>Recent content in Functional Programming on map(learn, world)</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 06 Jul 2024 19:30:33 +0900</lastBuildDate><atom:link href="/tags/functional-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Y-combinator in Python</title><link>/posts/y-combinator-in-python/</link><pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate><guid>/posts/y-combinator-in-python/</guid><description>&lt;h2 id="a-brief-introduction-to-lambda-calculus">A brief introduction to lambda calculus&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Lambda_calculus">Lambda calculus&lt;/a> is a language (formal system) to abstract and express calculation itself under only three concise rules.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Syntax&lt;/th>
 &lt;th>Name&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>x&lt;/td>
 &lt;td>Variable&lt;/td>
 &lt;td>Representing some value&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>(Î»x. M)&lt;/td>
 &lt;td>Abstraction&lt;/td>
 &lt;td>Defining a function, M is also an expression of lambda calculus&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>(M N)&lt;/td>
 &lt;td>Application&lt;/td>
 &lt;td>Calling a function, M and N are expressions of lambda calculus&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>In lambda calculus, we can say &amp;ldquo;applying/calling/invoking a function&amp;rdquo; interchangeably.&lt;/p></description></item></channel></rss>