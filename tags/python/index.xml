<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on map(learn, world)</title><link>/tags/python/</link><description>Recent content in Python on map(learn, world)</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 15 Feb 2025 10:47:16 +0900</lastBuildDate><atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Handling Async File Responses in Django</title><link>/posts/async-file-response-in-django/</link><pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate><guid>/posts/async-file-response-in-django/</guid><description>&lt;p>When building web applications, serving files efficiently is rather important. While Django provides several ways to handle file downloads, the traditional approaches are synchronous, which are not ideal for large files or concurrent downloads. Let&amp;rsquo;s explore how to implement an asynchronous file response solution that&amp;rsquo;s both efficient and straightforward to use.&lt;/p>
&lt;h2 id="the-challenge">The Challenge&lt;/h2>
&lt;p>Django&amp;rsquo;s built-in file serving capabilities are primarily synchronous, which introduce a few challenges:&lt;/p>
&lt;ul>
&lt;li>Each file download occupies a worker process&lt;/li>
&lt;li>Large files block other requests&lt;/li>
&lt;li>Chunk size is not easily configurable (You need to modify &lt;code>FileResponse.block_size&lt;/code>)&lt;/li>
&lt;li>Concurrent downloads perform rather poorly&lt;/li>
&lt;/ul>
&lt;h2 id="the-solution">The Solution&lt;/h2>
&lt;p>Our solution addresses these challenges whilst remaining quite maintainable:&lt;/p></description></item><item><title>Reconsider the performance benchmarks in Python web development</title><link>/posts/performance-benchmarks-in-python-web-development/</link><pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate><guid>/posts/performance-benchmarks-in-python-web-development/</guid><description>&lt;p>A few words on common misunderstandings and performance tips of web development benchmarks.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>As of 2020, amongst the various web benchmarks, the most prestigious and reliable one would be &lt;a href="https://www.techempower.com/benchmarks/#section=data-r19&amp;amp;hw=cl&amp;amp;test=fortune&amp;amp;l=zijzen-1r">TechEmpower benchmarks&lt;/a>. Despite the fact that &lt;a href="https://docs.python.org/3/library/asyncio.html">asyncio&lt;/a>-based web frameworks prevail on performance in theory and in practice, &lt;strong>how&lt;/strong> performant those frameworks are in pragmatic environments remains to be inspected.&lt;/p>
&lt;p>According to TechEmpower benchmarks, it can be noticed that some Python frameworks even &lt;a href="https://www.techempower.com/benchmarks/#section=data-r19&amp;amp;hw=ph&amp;amp;test=fortune&amp;amp;l=zijmrj-1r">outperform Gin&lt;/a>, the most famous and widely used Go web framework. In this article, some practical experiments will be carried out over the issue.&lt;/p></description></item><item><title>The integration of FastAPI and Django ORM</title><link>/posts/integrate-fastapi-and-django-orm/</link><pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate><guid>/posts/integrate-fastapi-and-django-orm/</guid><description>&lt;p>This is the English translation of the Japanese original post at &lt;a href="https://qiita.com/kigawas/items/80e48ccce98a35f65fff">qiita&lt;/a>, with some modifications.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>Recently FastAPI is &lt;a href="https://star-history.t9t.io/#tiangolo/fastapi">growing incredibly&lt;/a>. It&amp;rsquo;s blazingly fast and painless to develop, with &lt;a href="https://www.techempower.com/benchmarks/#section=data-r20&amp;amp;hw=ph&amp;amp;test=fortune&amp;amp;l=zijzen-sf">5~10x performance enhancement&lt;/a> over Django or Flask.&lt;/p>
&lt;p>I really want to switch to FastAPI from Django, however, it&amp;rsquo;s not that easy to give up Django and its self-sufficient user system as well as the admin page totally. I know it sounds greedy, but in fact there &lt;strong>is&lt;/strong> such convenience. This time I&amp;rsquo;ll show you how to integrate FastAPI and Django ORM simply and quickly.&lt;/p></description></item><item><title>Y-combinator in Python</title><link>/posts/y-combinator-in-python/</link><pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate><guid>/posts/y-combinator-in-python/</guid><description>&lt;h2 id="a-brief-introduction-to-lambda-calculus">A brief introduction to lambda calculus&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Lambda_calculus">Lambda calculus&lt;/a> is a language (formal system) to abstract and express calculation itself under only three concise rules.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Syntax&lt;/th>
 &lt;th>Name&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>x&lt;/td>
 &lt;td>Variable&lt;/td>
 &lt;td>Representing some value&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>(Î»x. M)&lt;/td>
 &lt;td>Abstraction&lt;/td>
 &lt;td>Defining a function, M is also an expression of lambda calculus&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>(M N)&lt;/td>
 &lt;td>Application&lt;/td>
 &lt;td>Calling a function, M and N are expressions of lambda calculus&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>In lambda calculus, we can say &amp;ldquo;applying/calling/invoking a function&amp;rdquo; interchangeably.&lt;/p></description></item></channel></rss>