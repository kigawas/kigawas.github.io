<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Redux on map(learn, world)</title><link>/tags/redux/</link><description>Recent content in Redux on map(learn, world)</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 06 Apr 2023 12:16:30 +0900</lastBuildDate><atom:link href="/tags/redux/index.xml" rel="self" type="application/rss+xml"/><item><title>Why state containers are necessary</title><link>/posts/why-state-containers/</link><pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate><guid>/posts/why-state-containers/</guid><description>&lt;p>This article is partially based on &lt;a href="https://www.zhihu.com/question/63726609/answer/934233429">a prior art&lt;/a>.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>In modern JavaScript development, using some state container is a prevalent practice: &lt;code>redux&lt;/code> for &lt;code>react&lt;/code> and &lt;code>vuex&lt;/code> for &lt;code>vue&lt;/code>. But why it is necessary to integrate those &amp;ldquo;awesome state containers&amp;rdquo;? There might be too many reasons and explanations can be found all over the internet. In contrast, before stepping into the next level, we&amp;rsquo;ll walk through the simplest scenario: states in module &lt;code>A&lt;/code> have changed and module &lt;code>B&lt;/code> needs to know and react.&lt;/p></description></item></channel></rss>