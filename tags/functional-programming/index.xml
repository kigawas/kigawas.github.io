<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>functional programming on map(learn, world)</title><link>/tags/functional-programming/</link><description>Recent content in functional programming on map(learn, world)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 22 Nov 2018 00:00:00 +0000</lastBuildDate><atom:link href="/tags/functional-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Y-combinator in Python</title><link>/posts/y-combinator-in-python/</link><pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate><guid>/posts/y-combinator-in-python/</guid><description>A brief introduction to lambda calculus Lambda calculus is a language (formal system) to abstract and express calculation itself under only three concise rules.
Syntax Name Description x Variable Representing some value (Î»x. M) Abstraction Defining a function, M is also an expression of lambda calculus (M N) Application Calling a function, M and N are expressions of lambda calculus In lambda calculus, we can say &amp;ldquo;applying/calling/invoking a function&amp;rdquo; interchangeably.</description></item></channel></rss>