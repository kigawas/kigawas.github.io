<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on map(learn, world)</title><link>/tags/rust/</link><description>Recent content in Rust on map(learn, world)</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 08 Aug 2024 01:06:14 +0900</lastBuildDate><atom:link href="/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Bridging the Gap: A Rustacean Clean Architecture Approach to Web Development</title><link>/posts/rustacean-clean-architecture-approach/</link><pubDate>Sun, 21 Jul 2024 00:00:00 +0000</pubDate><guid>/posts/rustacean-clean-architecture-approach/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Disclaimer: This article is partly generated with Claude and revamped with GPT-4o mini.&lt;/p>
&lt;p>TL;DR: &lt;a href="https://github.com/kigawas/clean-axum">https://github.com/kigawas/clean-axum&lt;/a>&lt;/p>
&lt;h3 id="the-web-development-framework-dilemma">The Web Development Framework Dilemma&lt;/h3>
&lt;p>In the dynamic world of web development, choosing the right language and framework often feels like solving a Rubik&amp;rsquo;s cube blindfolded. As developers, we frequently find ourselves balancing competing priorities: performance vs. development speed, flexibility vs. structure, scalability vs. ease of use.&lt;/p>
&lt;p>Selecting a web development framework is a multifaceted challenge, whose dilemma often leads to compromises. But what if there were a way to optimize for all these factors?&lt;/p></description></item><item><title>Redefining shared behaviors algebraically</title><link>/posts/interface-vs-adt/</link><pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate><guid>/posts/interface-vs-adt/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>Object-oriented programming is a ubiquitous paradigm all over the software development field as it could be found in the most of prevalent languages: C++, C#, Java, JavaScript, Python, etc. &lt;a href="https://en.wikipedia.org/wiki/Polymorphism_%28computer_science%29">Polymorphism&lt;/a>, an important characteristic in OOP, is often implemented by sub-typing in a typical OOP language.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">talk&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Cat&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> Animal {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">talk&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;meow&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Dog&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> Animal {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">talk&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;bowwow&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>interface&lt;/code>, or &lt;code>abstract class&lt;/code> in some languages, here indicates &lt;strong>a protocol of shared behaviors&lt;/strong>, normally there&amp;rsquo;s no way to get access to data in the interface, thus, only a few of default behaviors can be implemented in the interface rather than in its subclasses.&lt;/p></description></item></channel></rss>